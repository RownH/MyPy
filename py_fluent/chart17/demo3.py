'''
   17.2 阻塞型I/0和GLL

   CPython不是线程安全的,因此有全局解释锁的(GIL) 一次只允许一个线程执行Python字节码
   因此  一个Python进程通常不能同时使用多个CPU核心
    编写Python代码时无法控制GIL 不过 执行耗时的任务时,可以使用一个内置的函数或一个C语言编写的扩展释放GIL;
    有个使用C语言编写的python库可以管理GIL,自行启动操作系统线程


    但是 标准库中所有执行阻塞型I/O操作的函数,在恩钢带操作系统返回结果时 都会释放GIL.这意味着Python语言这个层次可以使用多线程
    而I/O密集型 Python程序能从中受益 一个Python线程等待网络响应时,阻塞型I/O函数会释放GIL,在运行一个线程
    time.sleep()也会释放GIL

    
'''